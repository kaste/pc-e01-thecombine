name: Publish channel.json Asset

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: channel-latest
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Generate new channel.json
        id: generate
        run: |
          python scripts/generate_channel.py
          # Verify the file was created
          if [ ! -f "channel.json" ]; then
            echo "Error: channel.json was not generated"
            exit 1
          fi

          # Calculate hash of new file
          NEW_HASH=$(sha256sum channel.json | cut -d ' ' -f 1)
          echo "new_hash=$NEW_HASH" >> $GITHUB_OUTPUT
          echo "New channel.json hash: $NEW_HASH"

      - name: Try to download existing channel.json
        id: download
        continue-on-error: true
        run: |
          if gh release download ${{ env.RELEASE_TAG }} --pattern "channel.json" --output existing-channel.json; then
            EXISTING_HASH=$(sha256sum existing-channel.json | cut -d ' ' -f 1)
            echo "existing_hash=$EXISTING_HASH" >> $GITHUB_OUTPUT
            echo "Existing channel.json hash: $EXISTING_HASH"
          else
            echo "No existing channel.json found or download failed"
            echo "existing_hash=none" >> $GITHUB_OUTPUT
          fi

      - name: Determine if update is needed
        id: check
        run: |
          # If first run or hashes differ, update is needed
          if [ "${{ steps.download.outputs.existing_hash }}" != "${{ steps.generate.outputs.new_hash }}" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Update needed: Content has changed or first run"
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No update needed: Content is unchanged"
          fi

      - name: Update release and upload asset if needed
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # Create or update the release
          gh release view ${{ env.RELEASE_TAG }} || \
          gh release create ${{ env.RELEASE_TAG }} \
            --title "Channel Asset" \
            --notes "channel.json"

          # Format release notes
          HASH=${{ steps.generate.outputs.new_hash }}
          DATE=$(TZ=Europe/Berlin date +"%B %d, %Y, %H:%M GMT%:::z" | sed -E 's/([+-])0/\1/')
          REPO_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Fetch existing release notes
          EXISTING_NOTES=$(gh release view ${{ env.RELEASE_TAG }} --json body -q '.body')

          # Extract previous entries (excluding current)
          PREVIOUS=$(echo "$EXISTING_NOTES" | awk '
            BEGIN { RS=""; ORS="\n\n" }
            /^channel\.json -- \*\*current\*\*/ { next }
            /^_previous versions_:/,0 { print }
          ' | grep -A2 '^sha256:' || true)

          # Build new notes
          {
            echo "channel.json -- **current**"
            echo "sha256: $HASH"
            echo "date: $DATE"
            echo "([logs]($REPO_URL))"
          } > notes.txt

          if [ "$PREVIOUS" ]; then
            {
              echo ""
              echo "_previous versions_:"

              # Print prior hashes/dates up to 4 (so total stays at 5)
              echo "$PREVIOUS" | awk 'BEGIN{ RS=""; ORS="\n\n" } { print }' | head -n 4
            } >> notes.txt
          fi

          echo "Uploading channel.json file..."
          gh release upload ${{ env.RELEASE_TAG }} channel.json --clobber

          echo "Updating release notes..."
          gh release edit ${{ env.RELEASE_TAG }} --notes-file notes.txt

      - name: Output result
        run: |
          if [ "${{ steps.check.outputs.update_needed }}" = "true" ]; then
            echo "✅ Channel updated with new content"
          else
            echo "ℹ️ No changes detected in channel.json, skipped update"
          fi

      - name: Show diff (if update and not first run)
        if: steps.check.outputs.update_needed == 'true' && steps.download.outputs.existing_hash != 'none'
        run: |
          echo "📄 Showing diff between existing-channel.json and channel.json"

          python -m json.tool existing-channel.json > old.json
          python -m json.tool channel.json > new.json
          diff -u old.json new.json || true
